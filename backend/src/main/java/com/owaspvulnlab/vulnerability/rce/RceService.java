package com.owaspvulnlab.vulnerability.rce;

import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;
import java.util.regex.Pattern;

@Service
public class RceService {

    // 危险命令黑名单
    private static final Set<String> DANGEROUS_COMMANDS = new HashSet<>(Arrays.asList(
        "rm", "del", "format", "shutdown", "reboot", "halt", "poweroff",
        "passwd", "su", "sudo", "chmod", "chown", "mount", "umount",
        "fdisk", "mkfs", "dd", "nc", "netcat", "telnet", "ssh"
    ));

    // 安全命令白名单
    private static final Set<String> SAFE_COMMANDS = new HashSet<>(Arrays.asList(
        "echo", "date", "whoami", "pwd", "ls", "dir", "ping", "nslookup"
    ));

    /**
     * 易受命令注入攻击的ping方法
     */
    public Map<String, Object> vulnerablePing(String host) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("type", "Vulnerable Command Injection");
            result.put("input", host);
            
            // 危险：直接拼接用户输入到命令中
            String command = "ping -c 4 " + host;
            result.put("command", command);
            
            Process process = Runtime.getRuntime().exec(command);
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            StringBuilder errorOutput = new StringBuilder();
            while ((line = errorReader.readLine()) != null) {
                errorOutput.append(line).append("\n");
            }
            
            int exitCode = process.waitFor();
            
            result.put("success", exitCode == 0);
            result.put("exit_code", exitCode);
            result.put("output", output.toString());
            result.put("error", errorOutput.toString());
            result.put("description", "危险：直接执行用户输入的命令，可能导致命令注入");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "命令执行失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 易受命令注入攻击的系统信息查询
     */
    public Map<String, Object> vulnerableSystemInfo(String command) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("type", "Vulnerable System Command");
            result.put("input", command);
            
            // 危险：直接执行用户提供的命令
            result.put("command", command);
            
            Process process = Runtime.getRuntime().exec(command);
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            int lineCount = 0;
            while ((line = reader.readLine()) != null && lineCount < 50) { // 限制输出行数
                output.append(line).append("\n");
                lineCount++;
            }
            
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            StringBuilder errorOutput = new StringBuilder();
            lineCount = 0;
            while ((line = errorReader.readLine()) != null && lineCount < 20) {
                errorOutput.append(line).append("\n");
                lineCount++;
            }
            
            int exitCode = process.waitFor();
            
            result.put("success", exitCode == 0);
            result.put("exit_code", exitCode);
            result.put("output", output.toString());
            result.put("error", errorOutput.toString());
            result.put("description", "危险：直接执行用户命令，存在严重安全风险");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "命令执行失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 易受命令注入攻击的文件操作
     */
    public Map<String, Object> vulnerableFileOperation(String filename, String operation) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("type", "Vulnerable File Operation");
            result.put("filename", filename);
            result.put("operation", operation);
            
            String command;
            switch (operation.toLowerCase()) {
                case "read":
                    command = "cat " + filename;
                    break;
                case "list":
                    command = "ls -la " + filename;
                    break;
                case "stat":
                    command = "stat " + filename;
                    break;
                default:
                    command = operation + " " + filename;
            }
            
            result.put("command", command);
            
            Process process = Runtime.getRuntime().exec(command);
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            int lineCount = 0;
            while ((line = reader.readLine()) != null && lineCount < 30) {
                output.append(line).append("\n");
                lineCount++;
            }
            
            int exitCode = process.waitFor();
            
            result.put("success", exitCode == 0);
            result.put("exit_code", exitCode);
            result.put("output", output.toString());
            result.put("description", "危险：文件操作未进行安全验证");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "文件操作失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 安全的ping方法
     */
    public Map<String, Object> safePing(String host) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("type", "Safe Command Execution");
            result.put("input", host);
            
            // 安全检查：验证主机名格式
            String validationError = validateHostname(host);
            if (validationError != null) {
                result.put("success", false);
                result.put("error", validationError);
                result.put("description", "安全检查失败: " + validationError);
                return result;
            }
            
            // 安全：使用参数数组而不是字符串拼接
            String[] command = {"ping", "-c", "4", host};
            result.put("command", Arrays.toString(command));
            
            ProcessBuilder processBuilder = new ProcessBuilder(command);
            Process process = processBuilder.start();
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            
            int exitCode = process.waitFor();
            
            result.put("success", exitCode == 0);
            result.put("exit_code", exitCode);
            result.put("output", output.toString());
            result.put("description", "安全：使用参数数组执行命令，防止命令注入");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "安全命令执行失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 安全的系统命令执行
     */
    public Map<String, Object> safeSystemCommand(String command) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("type", "Safe System Command");
            result.put("input", command);
            
            // 安全检查：只允许白名单命令
            String[] parts = command.trim().split("\\s+");
            if (parts.length == 0) {
                result.put("success", false);
                result.put("error", "命令不能为空");
                return result;
            }
            
            String baseCommand = parts[0];
            if (!SAFE_COMMANDS.contains(baseCommand)) {
                result.put("success", false);
                result.put("error", "命令不在白名单中: " + baseCommand);
                result.put("allowed_commands", SAFE_COMMANDS);
                return result;
            }
            
            // 检查危险命令
            for (String part : parts) {
                if (DANGEROUS_COMMANDS.contains(part)) {
                    result.put("success", false);
                    result.put("error", "检测到危险命令: " + part);
                    return result;
                }
            }
            
            result.put("command", command);
            
            ProcessBuilder processBuilder = new ProcessBuilder(parts);
            Process process = processBuilder.start();
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            int lineCount = 0;
            while ((line = reader.readLine()) != null && lineCount < 20) {
                output.append(line).append("\n");
                lineCount++;
            }
            
            int exitCode = process.waitFor();
            
            result.put("success", exitCode == 0);
            result.put("exit_code", exitCode);
            result.put("output", output.toString());
            result.put("description", "安全：使用白名单验证命令");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "安全命令执行失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 验证主机名格式
     */
    private String validateHostname(String hostname) {
        if (hostname == null || hostname.trim().isEmpty()) {
            return "主机名不能为空";
        }
        
        hostname = hostname.trim();
        
        // 检查长度
        if (hostname.length() > 253) {
            return "主机名过长";
        }
        
        // 检查是否包含危险字符
        if (hostname.contains(";") || hostname.contains("&") || hostname.contains("|") ||
            hostname.contains("`") || hostname.contains("$") || hostname.contains("(") ||
            hostname.contains(")") || hostname.contains("<") || hostname.contains(">")) {
            return "主机名包含非法字符";
        }
        
        // 简单的主机名格式验证
        Pattern hostnamePattern = Pattern.compile("^[a-zA-Z0-9.-]+$");
        if (!hostnamePattern.matcher(hostname).matches()) {
            return "主机名格式不正确";
        }
        
        return null; // 验证通过
    }
}