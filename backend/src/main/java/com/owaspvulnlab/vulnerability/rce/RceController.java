package com.owaspvulnlab.vulnerability.rce;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;

@RestController
@RequestMapping("/api/rce")
@CrossOrigin(origins = "*")
public class RceController {

    @Autowired
    private RceService rceService;

    /**
     * 易受命令注入攻击的ping接口
     */
    @PostMapping("/vulnerable/ping")
    public Map<String, Object> vulnerablePing(@RequestParam String host) {
        return rceService.vulnerablePing(host);
    }

    /**
     * 易受命令注入攻击的系统命令接口
     */
    @PostMapping("/vulnerable/system")
    public Map<String, Object> vulnerableSystemCommand(@RequestParam String command) {
        return rceService.vulnerableSystemInfo(command);
    }

    /**
     * 易受命令注入攻击的文件操作接口
     */
    @PostMapping("/vulnerable/file")
    public Map<String, Object> vulnerableFileOperation(
            @RequestParam String filename,
            @RequestParam String operation) {
        return rceService.vulnerableFileOperation(filename, operation);
    }

    /**
     * 安全的ping接口
     */
    @PostMapping("/safe/ping")
    public Map<String, Object> safePing(@RequestParam String host) {
        return rceService.safePing(host);
    }

    /**
     * 安全的系统命令接口
     */
    @PostMapping("/safe/system")
    public Map<String, Object> safeSystemCommand(@RequestParam String command) {
        return rceService.safeSystemCommand(command);
    }

    /**
     * 获取RCE漏洞信息和测试用例
     */
    @GetMapping("/info")
    public Map<String, Object> getRceInfo() {
        Map<String, Object> info = new HashMap<>();
        
        info.put("vulnerability", "Remote Code Execution (RCE)");
        info.put("description", "远程代码执行漏洞允许攻击者在目标系统上执行任意命令");
        
        Map<String, Object> types = new HashMap<>();
        
        // 命令注入测试用例
        Map<String, Object> commandInjection = new HashMap<>();
        commandInjection.put("name", "命令注入");
        commandInjection.put("description", "通过在输入中注入额外的命令来执行恶意代码");
        commandInjection.put("test_payloads", Arrays.asList(
            "127.0.0.1; whoami",
            "127.0.0.1 && id",
            "127.0.0.1 | cat /etc/passwd",
            "127.0.0.1; ls -la",
            "127.0.0.1 && echo 'RCE Success'",
            "127.0.0.1; uname -a",
            "127.0.0.1 && pwd",
            "127.0.0.1 | ps aux"
        ));
        commandInjection.put("endpoints", Arrays.asList(
            "POST /api/rce/vulnerable/ping",
            "POST /api/rce/vulnerable/system",
            "POST /api/rce/vulnerable/file"
        ));
        types.put("command_injection", commandInjection);
        
        // 系统命令执行测试用例
        Map<String, Object> systemCommand = new HashMap<>();
        systemCommand.put("name", "系统命令执行");
        systemCommand.put("description", "直接执行系统命令");
        systemCommand.put("test_payloads", Arrays.asList(
            "whoami",
            "id",
            "uname -a",
            "pwd",
            "ls -la",
            "ps aux",
            "netstat -an",
            "cat /etc/hosts"
        ));
        systemCommand.put("endpoints", Arrays.asList(
            "POST /api/rce/vulnerable/system"
        ));
        types.put("system_command", systemCommand);
        
        // 文件操作命令注入
        Map<String, Object> fileOperation = new HashMap<>();
        fileOperation.put("name", "文件操作命令注入");
        fileOperation.put("description", "通过文件操作参数注入命令");
        fileOperation.put("test_payloads", Arrays.asList(
            "/etc/passwd; whoami",
            "/etc/hosts && id",
            "/tmp/test.txt | ps aux",
            "/etc/passwd; ls -la /",
            "/etc/hosts && uname -a"
        ));
        fileOperation.put("operations", Arrays.asList("read", "list", "stat"));
        fileOperation.put("endpoints", Arrays.asList(
            "POST /api/rce/vulnerable/file"
        ));
        types.put("file_operation", fileOperation);
        
        info.put("types", types);
        
        // 防护措施
        Map<String, Object> protection = new HashMap<>();
        protection.put("input_validation", "严格验证和过滤用户输入");
        protection.put("whitelist", "使用命令白名单限制可执行的命令");
        protection.put("parameterized", "使用参数化命令执行而不是字符串拼接");
        protection.put("least_privilege", "以最小权限运行应用程序");
        protection.put("sandbox", "在沙箱环境中执行命令");
        info.put("protection", protection);
        
        // 安全接口
        Map<String, Object> safeEndpoints = new HashMap<>();
        safeEndpoints.put("safe_ping", "POST /api/rce/safe/ping");
        safeEndpoints.put("safe_system", "POST /api/rce/safe/system");
        safeEndpoints.put("description", "这些接口实现了安全的命令执行机制");
        info.put("safe_endpoints", safeEndpoints);
        
        return info;
    }

    /**
     * 获取RCE测试示例
     */
    @GetMapping("/examples")
    public Map<String, Object> getRceExamples() {
        Map<String, Object> examples = new HashMap<>();
        
        // Ping命令注入示例
        Map<String, Object> pingExample = new HashMap<>();
        pingExample.put("endpoint", "POST /api/rce/vulnerable/ping");
        pingExample.put("parameter", "host");
        pingExample.put("normal_input", "127.0.0.1");
        pingExample.put("malicious_inputs", Arrays.asList(
            "127.0.0.1; whoami",
            "127.0.0.1 && cat /etc/passwd",
            "127.0.0.1 | ps aux",
            "127.0.0.1; ls -la /"
        ));
        pingExample.put("description", "在ping命令中注入额外的系统命令");
        examples.put("ping_injection", pingExample);
        
        // 系统命令执行示例
        Map<String, Object> systemExample = new HashMap<>();
        systemExample.put("endpoint", "POST /api/rce/vulnerable/system");
        systemExample.put("parameter", "command");
        systemExample.put("safe_commands", Arrays.asList("whoami", "date", "pwd"));
        systemExample.put("dangerous_commands", Arrays.asList(
            "cat /etc/passwd",
            "ls -la /",
            "ps aux",
            "netstat -an",
            "uname -a"
        ));
        systemExample.put("description", "直接执行用户提供的系统命令");
        examples.put("system_command", systemExample);
        
        // 文件操作注入示例
        Map<String, Object> fileExample = new HashMap<>();
        fileExample.put("endpoint", "POST /api/rce/vulnerable/file");
        Map<String, Object> fileParams = new HashMap<>();
        fileParams.put("filename", "文件路径");
        fileParams.put("operation", "操作类型");
        fileExample.put("parameters", fileParams);
        
        Map<String, Object> normalUsage = new HashMap<>();
        normalUsage.put("filename", "/etc/hosts");
        normalUsage.put("operation", "read");
        fileExample.put("normal_usage", normalUsage);
        
        Map<String, Object> injection1 = new HashMap<>();
        injection1.put("filename", "/etc/passwd; whoami");
        injection1.put("operation", "read");
        
        Map<String, Object> injection2 = new HashMap<>();
        injection2.put("filename", "/etc/hosts && id");
        injection2.put("operation", "list");
        
        Map<String, Object> injection3 = new HashMap<>();
        injection3.put("filename", "/tmp/test.txt | ps aux");
        injection3.put("operation", "stat");
        
        fileExample.put("injection_examples", Arrays.asList(injection1, injection2, injection3));
        fileExample.put("description", "通过文件路径参数注入系统命令");
        examples.put("file_injection", fileExample);
        
        return examples;
    }
}