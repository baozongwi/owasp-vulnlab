package com.owaspvulnlab.vulnerability.ssrf;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import java.util.regex.Pattern;

@Service
public class SsrfService {

    // 白名单域名
    private static final Set<String> ALLOWED_DOMAINS = new HashSet<>(Arrays.asList(
        "httpbin.org",
        "jsonplaceholder.typicode.com",
        "api.github.com"
    ));

    // 黑名单IP模式
    private static final List<Pattern> BLOCKED_IP_PATTERNS = Arrays.asList(
        Pattern.compile("^127\\..*"),           // 127.x.x.x
        Pattern.compile("^10\\..*"),            // 10.x.x.x
        Pattern.compile("^172\\.(1[6-9]|2[0-9]|3[0-1])\\..*"), // 172.16.x.x - 172.31.x.x
        Pattern.compile("^192\\.168\\..*"),     // 192.168.x.x
        Pattern.compile("^169\\.254\\..*"),     // 169.254.x.x (Link-local)
        Pattern.compile("^0\\..*"),             // 0.x.x.x
        Pattern.compile("^224\\..*")            // 224.x.x.x (Multicast)
    );

    /**
     * 易受SSRF攻击的URL获取方法
     */
    public Map<String, Object> vulnerableFetch(String url) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("requested_url", url);
            result.put("type", "Vulnerable SSRF");
            
            // 危险：直接请求用户提供的URL，不进行任何验证
            HttpClient httpClient = HttpClients.createDefault();
            HttpGet request = new HttpGet(url);
            
            // 设置超时
            request.setHeader("User-Agent", "OWASP-VulnLab/1.0");
            
            HttpResponse response = httpClient.execute(request);
            String responseBody = EntityUtils.toString(response.getEntity());
            
            result.put("success", true);
            result.put("status_code", response.getStatusLine().getStatusCode());
            result.put("response_body", responseBody.length() > 1000 ? 
                      responseBody.substring(0, 1000) + "..." : responseBody);
            result.put("content_length", responseBody.length());
            result.put("description", "危险：直接请求用户提供的URL，可能导致SSRF攻击");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "请求失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 易受SSRF攻击的图片代理方法
     */
    public Map<String, Object> vulnerableImageProxy(String imageUrl) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("requested_url", imageUrl);
            result.put("type", "Vulnerable Image Proxy");
            
            // 危险：直接请求用户提供的图片URL
            URL url = new URL(imageUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(10000);
            
            int responseCode = connection.getResponseCode();
            String contentType = connection.getContentType();
            int contentLength = connection.getContentLength();
            
            result.put("success", responseCode == 200);
            result.put("status_code", responseCode);
            result.put("content_type", contentType);
            result.put("content_length", contentLength);
            result.put("description", "危险：图片代理未验证URL，可能被用于内网探测");
            
            // 读取部分响应内容
            if (responseCode == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                int lines = 0;
                while ((line = reader.readLine()) != null && lines < 10) {
                    response.append(line).append("\n");
                    lines++;
                }
                reader.close();
                
                result.put("response_preview", response.toString());
            }
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "图片代理请求失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 易受SSRF攻击的文件下载方法
     */
    public Map<String, Object> vulnerableDownload(String fileUrl) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("requested_url", fileUrl);
            result.put("type", "Vulnerable File Download");
            
            // 危险：直接下载用户提供的文件URL
            URL url = new URL(fileUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("HEAD"); // 只获取头信息
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(10000);
            
            int responseCode = connection.getResponseCode();
            String contentType = connection.getContentType();
            int contentLength = connection.getContentLength();
            String fileName = getFileNameFromUrl(fileUrl);
            
            result.put("success", responseCode == 200);
            result.put("status_code", responseCode);
            result.put("content_type", contentType);
            result.put("content_length", contentLength);
            result.put("file_name", fileName);
            result.put("description", "危险：文件下载未验证URL，可能访问内网资源");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "文件下载失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 安全的URL获取方法
     */
    public Map<String, Object> safeFetch(String url) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("requested_url", url);
            result.put("type", "Safe SSRF Protection");
            
            // 安全检查
            String validationError = validateUrl(url);
            if (validationError != null) {
                result.put("success", false);
                result.put("error", validationError);
                result.put("description", "安全检查失败: " + validationError);
                return result;
            }
            
            // 安全：只允许访问白名单域名
            HttpClient httpClient = HttpClients.createDefault();
            HttpGet request = new HttpGet(url);
            request.setHeader("User-Agent", "OWASP-VulnLab-Safe/1.0");
            
            HttpResponse response = httpClient.execute(request);
            String responseBody = EntityUtils.toString(response.getEntity());
            
            result.put("success", true);
            result.put("status_code", response.getStatusLine().getStatusCode());
            result.put("response_body", responseBody.length() > 1000 ? 
                      responseBody.substring(0, 1000) + "..." : responseBody);
            result.put("content_length", responseBody.length());
            result.put("description", "安全：已通过白名单验证的URL请求");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "安全请求失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * URL安全验证
     */
    private String validateUrl(String urlString) {
        try {
            URL url = new URL(urlString);
            
            // 检查协议
            if (!"http".equals(url.getProtocol()) && !"https".equals(url.getProtocol())) {
                return "只允许HTTP和HTTPS协议";
            }
            
            // 检查域名白名单
            String host = url.getHost();
            if (!ALLOWED_DOMAINS.contains(host)) {
                return "域名不在白名单中: " + host;
            }
            
            // 检查IP黑名单
            for (Pattern pattern : BLOCKED_IP_PATTERNS) {
                if (pattern.matcher(host).matches()) {
                    return "禁止访问的IP地址: " + host;
                }
            }
            
            return null; // 验证通过
            
        } catch (Exception e) {
            return "URL格式错误: " + e.getMessage();
        }
    }

    /**
     * 从URL中提取文件名
     */
    private String getFileNameFromUrl(String url) {
        try {
            String path = new URL(url).getPath();
            return path.substring(path.lastIndexOf('/') + 1);
        } catch (Exception e) {
            return "unknown";
        }
    }
}