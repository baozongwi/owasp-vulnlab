package com.owaspvulnlab.vulnerability.ssrf;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/ssrf")
@CrossOrigin(origins = "*")
public class SsrfController {

    @Autowired
    private SsrfService ssrfService;

    /**
     * 易受SSRF攻击的URL获取接口
     */
    @GetMapping("/vulnerable/fetch")
    public Map<String, Object> vulnerableFetch(@RequestParam String url) {
        return ssrfService.vulnerableFetch(url);
    }

    /**
     * 易受SSRF攻击的图片代理接口
     */
    @GetMapping("/vulnerable/image-proxy")
    public Map<String, Object> vulnerableImageProxy(@RequestParam String imageUrl) {
        return ssrfService.vulnerableImageProxy(imageUrl);
    }

    /**
     * 易受SSRF攻击的文件下载接口
     */
    @GetMapping("/vulnerable/download")
    public Map<String, Object> vulnerableDownload(@RequestParam String fileUrl) {
        return ssrfService.vulnerableDownload(fileUrl);
    }

    /**
     * 安全的URL获取接口
     */
    @GetMapping("/safe/fetch")
    public Map<String, Object> safeFetch(@RequestParam String url) {
        return ssrfService.safeFetch(url);
    }

    /**
     * 获取SSRF测试说明
     */
    @GetMapping("/info")
    public Map<String, Object> getInfo() {
        Map<String, Object> result = new HashMap<>();
        result.put("vulnerability", "Server-Side Request Forgery (SSRF)");
        result.put("description", "SSRF是一种安全漏洞，攻击者能够诱使服务器向攻击者选择的任意域发起请求，可能导致内网探测、敏感信息泄露等。");
        
        Map<String, Object> endpoints = new HashMap<>();
        endpoints.put("vulnerable_fetch", "/api/ssrf/vulnerable/fetch?url= - 易受攻击的URL获取");
        endpoints.put("vulnerable_image_proxy", "/api/ssrf/vulnerable/image-proxy?imageUrl= - 易受攻击的图片代理");
        endpoints.put("vulnerable_download", "/api/ssrf/vulnerable/download?fileUrl= - 易受攻击的文件下载");
        endpoints.put("safe_fetch", "/api/ssrf/safe/fetch?url= - 安全的URL获取");
        result.put("endpoints", endpoints);
        
        Map<String, Object> testPayloads = new HashMap<>();
        testPayloads.put("localhost", "http://localhost:8080/api/ssrf/info");
        testPayloads.put("internal_ip", "http://127.0.0.1:8080/h2-console");
        testPayloads.put("metadata_service", "http://169.254.169.254/latest/meta-data/");
        testPayloads.put("file_protocol", "file:///etc/passwd");
        testPayloads.put("ftp_protocol", "ftp://internal-server/");
        testPayloads.put("redirect_bypass", "http://httpbin.org/redirect-to?url=http://127.0.0.1:8080");
        result.put("test_payloads", testPayloads);
        
        Map<String, Object> safeDomains = new HashMap<>();
        safeDomains.put("httpbin", "http://httpbin.org/get");
        safeDomains.put("jsonplaceholder", "https://jsonplaceholder.typicode.com/posts/1");
        safeDomains.put("github_api", "https://api.github.com/users/octocat");
        result.put("safe_domains", safeDomains);
        
        Map<String, Object> attackScenarios = new HashMap<>();
        attackScenarios.put("port_scan", "使用不同端口扫描内网服务");
        attackScenarios.put("cloud_metadata", "访问云服务元数据接口获取敏感信息");
        attackScenarios.put("internal_services", "访问内网服务如数据库、缓存等");
        attackScenarios.put("file_read", "通过file://协议读取本地文件");
        result.put("attack_scenarios", attackScenarios);
        
        return result;
    }
}