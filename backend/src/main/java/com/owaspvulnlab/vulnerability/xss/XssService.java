package com.owaspvulnlab.vulnerability.xss;

import org.springframework.stereotype.Service;
import org.springframework.web.util.HtmlUtils;

import java.util.*;

@Service
public class XssService {

    // 模拟存储的评论数据
    private List<Map<String, Object>> comments = new ArrayList<>();
    private Long commentIdCounter = 1L;

    /**
     * 反射型XSS - 直接返回用户输入
     */
    public Map<String, Object> reflectedXss(String input) {
        Map<String, Object> result = new HashMap<>();
        
        // 危险：直接返回用户输入，不进行任何过滤
        String vulnerableOutput = "您输入的内容是: " + input;
        
        result.put("type", "Reflected XSS");
        result.put("input", input);
        result.put("vulnerable_output", vulnerableOutput);
        result.put("safe_output", "您输入的内容是: " + HtmlUtils.htmlEscape(input));
        result.put("description", "反射型XSS：用户输入直接反射到页面中，未经过滤");
        
        return result;
    }

    /**
     * 存储型XSS - 存储用户输入并返回
     */
    public Map<String, Object> storedXss(String username, String comment) {
        Map<String, Object> result = new HashMap<>();
        
        // 危险：直接存储用户输入，不进行过滤
        Map<String, Object> newComment = new HashMap<>();
        newComment.put("id", commentIdCounter++);
        newComment.put("username", username);
        newComment.put("comment", comment);
        newComment.put("timestamp", new Date());
        
        comments.add(newComment);
        
        result.put("type", "Stored XSS");
        result.put("message", "评论已保存");
        result.put("comment_id", newComment.get("id"));
        result.put("description", "存储型XSS：恶意脚本被存储在服务器中，每次访问时都会执行");
        
        return result;
    }

    /**
     * 获取所有评论（存储型XSS展示）
     */
    public Map<String, Object> getComments() {
        Map<String, Object> result = new HashMap<>();
        
        result.put("type", "Stored XSS Display");
        result.put("comments", comments);
        result.put("total", comments.size());
        result.put("description", "显示所有评论，包含可能的恶意脚本");
        
        return result;
    }

    /**
     * DOM型XSS模拟 - 返回包含JavaScript的页面内容
     */
    public Map<String, Object> domXss(String fragment) {
        Map<String, Object> result = new HashMap<>();
        
        // 危险：返回包含用户输入的JavaScript代码
        String vulnerableScript = "document.getElementById('output').innerHTML = '" + fragment + "';";
        String safeScript = "document.getElementById('output').textContent = '" + 
                           fragment.replace("'", "\\'").replace("\"", "\\\"") + "';";
        
        result.put("type", "DOM XSS");
        result.put("input", fragment);
        result.put("vulnerable_script", vulnerableScript);
        result.put("safe_script", safeScript);
        result.put("description", "DOM型XSS：通过修改DOM结构执行恶意脚本");
        
        return result;
    }

    /**
     * 清空评论
     */
    public Map<String, Object> clearComments() {
        comments.clear();
        commentIdCounter = 1L;
        
        Map<String, Object> result = new HashMap<>();
        result.put("message", "所有评论已清空");
        result.put("total", 0);
        return result;
    }

    /**
     * 安全的评论提交
     */
    public Map<String, Object> safeComment(String username, String comment) {
        Map<String, Object> result = new HashMap<>();
        
        // 安全：对用户输入进行HTML转义
        Map<String, Object> newComment = new HashMap<>();
        newComment.put("id", commentIdCounter++);
        newComment.put("username", HtmlUtils.htmlEscape(username));
        newComment.put("comment", HtmlUtils.htmlEscape(comment));
        newComment.put("timestamp", new Date());
        
        comments.add(newComment);
        
        result.put("type", "Safe Comment");
        result.put("message", "安全评论已保存");
        result.put("comment_id", newComment.get("id"));
        result.put("description", "安全实现：对用户输入进行HTML转义处理");
        
        return result;
    }
}