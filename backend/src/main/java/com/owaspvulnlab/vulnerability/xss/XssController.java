package com.owaspvulnlab.vulnerability.xss;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/xss")
@CrossOrigin(origins = "*")
public class XssController {

    @Autowired
    private XssService xssService;

    /**
     * 反射型XSS测试接口
     */
    @GetMapping("/reflected")
    public Map<String, Object> reflectedXss(@RequestParam String input) {
        return xssService.reflectedXss(input);
    }

    /**
     * 存储型XSS - 提交评论
     */
    @PostMapping("/stored/comment")
    public Map<String, Object> submitComment(@RequestBody Map<String, String> request) {
        String username = request.get("username");
        String comment = request.get("comment");
        return xssService.storedXss(username, comment);
    }

    /**
     * 存储型XSS - 获取评论
     */
    @GetMapping("/stored/comments")
    public Map<String, Object> getComments() {
        return xssService.getComments();
    }

    /**
     * DOM型XSS测试接口
     */
    @GetMapping("/dom")
    public Map<String, Object> domXss(@RequestParam String fragment) {
        return xssService.domXss(fragment);
    }

    /**
     * 清空评论
     */
    @DeleteMapping("/stored/comments")
    public Map<String, Object> clearComments() {
        return xssService.clearComments();
    }

    /**
     * 安全的评论提交
     */
    @PostMapping("/safe/comment")
    public Map<String, Object> safeComment(@RequestBody Map<String, String> request) {
        String username = request.get("username");
        String comment = request.get("comment");
        return xssService.safeComment(username, comment);
    }

    /**
     * 获取XSS测试说明
     */
    @GetMapping("/info")
    public Map<String, Object> getInfo() {
        Map<String, Object> result = new HashMap<>();
        result.put("vulnerability", "Cross-Site Scripting (XSS)");
        result.put("description", "XSS是一种代码注入攻击，攻击者通过在网页中注入恶意脚本，当其他用户浏览该网页时，恶意脚本会在用户浏览器中执行。");
        
        Map<String, Object> types = new HashMap<>();
        types.put("reflected", "反射型XSS - 恶意脚本通过URL参数等方式传入，立即反射到页面中");
        types.put("stored", "存储型XSS - 恶意脚本被存储在服务器中，每次访问时都会执行");
        types.put("dom", "DOM型XSS - 通过修改DOM结构执行恶意脚本");
        result.put("types", types);
        
        Map<String, Object> endpoints = new HashMap<>();
        endpoints.put("reflected", "/api/xss/reflected?input= - 反射型XSS测试");
        endpoints.put("stored_submit", "/api/xss/stored/comment - 存储型XSS提交评论");
        endpoints.put("stored_view", "/api/xss/stored/comments - 查看存储的评论");
        endpoints.put("dom", "/api/xss/dom?fragment= - DOM型XSS测试");
        endpoints.put("safe_submit", "/api/xss/safe/comment - 安全的评论提交");
        result.put("endpoints", endpoints);
        
        Map<String, Object> testPayloads = new HashMap<>();
        testPayloads.put("basic_alert", "<script>alert('XSS')</script>");
        testPayloads.put("img_onerror", "<img src=x onerror=alert('XSS')>");
        testPayloads.put("svg_onload", "<svg onload=alert('XSS')>");
        testPayloads.put("iframe_javascript", "<iframe src=javascript:alert('XSS')>");
        testPayloads.put("event_handler", "<div onmouseover=alert('XSS')>Hover me</div>");
        result.put("test_payloads", testPayloads);
        
        return result;
    }
}