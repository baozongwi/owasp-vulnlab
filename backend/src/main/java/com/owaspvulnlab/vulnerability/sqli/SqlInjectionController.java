package com.owaspvulnlab.vulnerability.sqli;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/sqli")
@CrossOrigin(origins = "*")
public class SqlInjectionController {

    @Autowired
    private SqlInjectionService sqlInjectionService;

    /**
     * 易受SQL注入攻击的登录接口
     */
    @PostMapping("/vulnerable/login")
    public Map<String, Object> vulnerableLogin(@RequestBody Map<String, String> request) {
        String username = request.get("username");
        String password = request.get("password");
        return sqlInjectionService.vulnerableLogin(username, password);
    }

    /**
     * 易受SQL注入攻击的搜索接口
     */
    @GetMapping("/vulnerable/search")
    public Map<String, Object> vulnerableSearch(@RequestParam String keyword) {
        return sqlInjectionService.vulnerableSearch(keyword);
    }

    /**
     * 易受SQL注入攻击的用户详情接口
     */
    @GetMapping("/vulnerable/user/{userId}")
    public Map<String, Object> vulnerableGetUser(@PathVariable String userId) {
        return sqlInjectionService.vulnerableGetUserById(userId);
    }

    /**
     * 安全的登录接口
     */
    @PostMapping("/safe/login")
    public Map<String, Object> safeLogin(@RequestBody Map<String, String> request) {
        String username = request.get("username");
        String password = request.get("password");
        return sqlInjectionService.safeLogin(username, password);
    }

    /**
     * 获取SQL注入测试说明
     */
    @GetMapping("/info")
    public Map<String, Object> getInfo() {
        Map<String, Object> result = new HashMap<>();
        result.put("vulnerability", "SQL Injection");
        result.put("description", "SQL注入是一种代码注入技术，攻击者通过在应用程序的数据库查询中插入恶意SQL代码来获取、修改或删除数据。");
        
        Map<String, Object> endpoints = new HashMap<>();
        endpoints.put("vulnerable_login", "/api/sqli/vulnerable/login - 易受攻击的登录接口");
        endpoints.put("vulnerable_search", "/api/sqli/vulnerable/search?keyword= - 易受攻击的搜索接口");
        endpoints.put("vulnerable_user", "/api/sqli/vulnerable/user/{userId} - 易受攻击的用户详情接口");
        endpoints.put("safe_login", "/api/sqli/safe/login - 安全的登录接口");
        result.put("endpoints", endpoints);
        
        Map<String, Object> testPayloads = new HashMap<>();
        testPayloads.put("login_bypass", "username: admin' OR '1'='1' -- , password: anything");
        testPayloads.put("union_injection", "keyword: ' UNION SELECT id,username,password,email,role,secret FROM users --");
        testPayloads.put("error_based", "userId: 1' AND (SELECT COUNT(*) FROM users) > 0 --");
        testPayloads.put("time_based", "userId: 1'; WAITFOR DELAY '00:00:05' --");
        result.put("test_payloads", testPayloads);
        
        return result;
    }
}