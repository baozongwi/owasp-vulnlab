package com.owaspvulnlab.vulnerability.sqli;

import com.owaspvulnlab.entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class SqlInjectionService {

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private DataSource dataSource;

    /**
     * 易受SQL注入攻击的登录方法 - 使用原生SQL
     */
    public Map<String, Object> vulnerableLogin(String username, String password) {
        Map<String, Object> result = new HashMap<>();
        try {
            // 危险：直接拼接SQL语句，容易受到SQL注入攻击
            String sql = "SELECT * FROM users WHERE username = '" + username + 
                        "' AND password = '" + password + "'";
            
            result.put("sql", sql);
            
            Connection connection = dataSource.getConnection();
            Statement statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(sql);
            
            List<Map<String, Object>> users = new ArrayList<>();
            while (rs.next()) {
                Map<String, Object> user = new HashMap<>();
                user.put("id", rs.getLong("id"));
                user.put("username", rs.getString("username"));
                user.put("email", rs.getString("email"));
                user.put("role", rs.getString("role"));
                user.put("secret", rs.getString("secret"));
                users.add(user);
            }
            
            result.put("success", !users.isEmpty());
            result.put("users", users);
            result.put("message", users.isEmpty() ? "登录失败" : "登录成功");
            
            rs.close();
            statement.close();
            connection.close();
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("message", "查询执行失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 易受SQL注入攻击的用户搜索方法
     */
    public Map<String, Object> vulnerableSearch(String keyword) {
        Map<String, Object> result = new HashMap<>();
        try {
            // 危险：直接拼接SQL语句
            String sql = "SELECT * FROM users WHERE username LIKE '%" + keyword + "%' OR email LIKE '%" + keyword + "%'";
            
            result.put("sql", sql);
            
            Query query = entityManager.createNativeQuery(sql, User.class);
            List<User> users = query.getResultList();
            
            result.put("success", true);
            result.put("users", users);
            result.put("count", users.size());
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("message", "搜索失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 易受SQL注入攻击的用户详情查询
     */
    public Map<String, Object> vulnerableGetUserById(String userId) {
        Map<String, Object> result = new HashMap<>();
        try {
            // 危险：直接拼接SQL语句
            String sql = "SELECT * FROM users WHERE id = " + userId;
            
            result.put("sql", sql);
            
            Query query = entityManager.createNativeQuery(sql, User.class);
            List<User> users = query.getResultList();
            
            result.put("success", true);
            result.put("user", users.isEmpty() ? null : users.get(0));
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("message", "查询失败: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * 安全的登录方法 - 使用参数化查询
     */
    public Map<String, Object> safeLogin(String username, String password) {
        Map<String, Object> result = new HashMap<>();
        try {
            // 安全：使用参数化查询
            String sql = "SELECT * FROM users WHERE username = ?1 AND password = ?2";
            
            result.put("sql", sql);
            result.put("parameters", new String[]{username, password});
            
            Query query = entityManager.createNativeQuery(sql, User.class);
            query.setParameter(1, username);
            query.setParameter(2, password);
            
            List<User> users = query.getResultList();
            
            result.put("success", !users.isEmpty());
            result.put("users", users);
            result.put("message", users.isEmpty() ? "登录失败" : "登录成功");
            
        } catch (Exception e) {
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("message", "查询执行失败: " + e.getMessage());
        }
        
        return result;
    }
}